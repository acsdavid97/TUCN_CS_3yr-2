
					 Lucrarea nr. 6

                  		INTERPRETOR PL0

   1. Scopul lucrarii 
     - prezentarea unui interpretor pentru un limbaj asemanator cu limbajul 
PASCAL , interpretor ce permite atit detailarea conceptelor de "localitate a 
obiectelor" in programarea structurata precum si problemele specifice generarii 
codului si tratarii erorilor.


     2 Notiuni teoretice

     2.1 Probleme generale
     Mini-interpretorul ce il prezentam in continuare are la baza interpretorul 
PL0 construit de Wirth in "Algorithms + Data Structures = Programs".Cerintele 
impuse acestui interpretor au avut in vedere in primul rind:
     -posibilitatea manipularii obiectelor( constante, variabile, proceduri ) 
locale
     -existenta unui sistem de revenire din erori adecvat
     -posibilitatea interpretarii instructiunilor specifice programarii 
structurate (ramificari, cicluri, apeluri)
     -pastrarea echilibrului intre implementarea unui interpretor performant si 
implementarea unui interpretor in scopuri didactice
     Aceste cerinte au impus folosirea urmatoarei gramatici:
     
program   ->   bloc '.'

bloc     ->   'const' decl_const
          |    'var' decl_var
          |    'procedure' ident ';' bloc ';'
          |    instructiuni

decl_const ->  ident '=' numar ',' decl_const
           |   ident '=' numar ';'

decl_var  ->   ident ',' decl_var 
          |    ident ';'

instructiuni   ->   ident ':=' expresie
               |    'call' ident
               |    'begin' instructiuni 'end'
               |    'if' conditie 'then' instructiuni
               |    'while' conditie 'do' instructiuni
               |    instructiuni ';' instructiuni
               |    ?

conditie  ->   'odd' expresie
          |    expresie '=' expresie
          |    expresie '>' expresie           
          |    expresie '<' expresie
          |    expresie '>=' expresie           
          |    expresie '<=' expresie
          |    expresie '/=' expresie           

expresie  ->   op+-e term termc
          
op+-e     ->  '+' | '-' | ?

termc     ->   '+' term 
          |    '-' term 
          |    ?

term      -> factor factorc

factorc   ->   '*' factor 
          |    '/' factor 
          |    ?

factor    -> ident
          |  numar
          | '(' expresie ')'
          
     Prin cumularea unor productii implementarea va tine cont de urmatoarele 
seturi de simboluri directoare:

               PRIM                     URMA

bloc           const var procedure      . ;
               ident if call begin 
               while

instructiuni   ident call begin         . ; end
               if while

conditie       odd + - ( ident          then do
               numar

expresie       + - ( ident numar        . ; ) end
                                        then do

term           ident numar (            . ; ) + - 
                                        end then do

factor         ident numar (            . ; ) + - * /
                                        end then do
            
     Interpretorul a fost construit prin metoda rafinarii ceea ce a permis 
evidentierea delimitarii intre analiza sintactica, tratarea erorilor, generarea 
codului intermediar si interpretarea acestuia.

     2.2 Analiza lexicala
     Analizorul lexical ( functia exsimb() ) are rolul de a recunoaste si a 
transmite analizorului sintactic informatii legate de prezenta 
     - unor cuvinte cheie (lexeme) cum ar fi BEGIN, IF, END, etc.
     - unor identificatori a caror caracteristici sint memorate intr-o tabela de 
simboluri
     - numere intregi
     - caractere speciale ( ex: operatori logici )
    Analizorul lexical mai foloseste o functie ajutatoare excar() astfel incit 
in procesul derivarii la orice moment t se cunoaste nu numai simbolul urmator ci 
si caracterul ce-i urmeaza acestuia.

     2.3 Analizorul sintactic
     Analizorul sintactic este implementat in maniera descendent recursiva. 
Functiile bloc(), instructiune(), conditie(), expresie(), termen(), factor(), 
decl_const(), decl_var(), nu constituie decit o transpunere in cod , in maniera 
cunoscuta a gramaticii prezentate anterior.
     Mai sint folosite functiile introdu() si pozitie() pentru accesul la tabela 
de simboluri .

	2.4 Tabela de simboluri
     Tabela de simboluri contine informatii specifice tipului datelor ce-i 
apatin astfel:
     -  pentru constante - valoarea
     - pentru variabile si proceduri - nivelul la care au fost declarate si 
adresa relativa in stiva de valori respectiv in segmentul de cod 
intermediar.(vezi declaratia de structura SIMB)

     2.5 Revenirea din erori
     Orice interpretor (compilator) trebuie sa ofere o diagnosticare corecta a 
erorilor intervenite pe parcursul analizei sintactice asigurind in acelasi timp 
si continuarea derivarii intrarii. Continuarea derivarii se poate face facind 
supozitii relativ la natura erorii si intentia programatorului sau prin neluarea 
in consideratie a unei secvente din fisierul de intrare.Implementarea de fata , 
in momentul aparitiei unei erori continua scanarea textului de intrare pina in 
momentul aparitiei unui simbol de unde derivarea poate fi reluata.( "don't panic 
rule").Pentru aceasta trebuie avut in vedere pentru fiecare nonterminal setul 
posibilelor terminale ce ii pot urma, apelindu- se la sfirsitul fiecarei rutine 
de derivare, o procedura pentru verificarea consistentei setului URMA.In cazul 
aparitiei unei erori, setul URMA nu trebuie vazut ca setul simbolurilor ce pot 
urma unui anumit nonterminal ci mai degraba ca setul simbolurilor de STOP in 
procesul revenirii din eroare.
     Functia care rezolva tratarea erorilor in implementarea noastra este fuctia 
test(set1,set2,mesaj) unde 'set1' constituie setul URMA corespunzator 
nonterminalului derivat, 'set2' este un set de simboluri suplimentare de stop 
iar 'mesaj' este mesajul de eroare asociat in cazul in care simbolul urmator nu 
apartine setului URMA. Daca apare eroare, pe linga semnalizarea acesteia, 
derivatorul efectueaza si ignorarea simbolurilor pina la primul simbol din set1 
sau set2.Aceasta tactica reuseste sa satisfaca suficient de bine 
caracteristicile unui compilator :
     1. Sa nu se blocheze pe nici o intrare
     2. Sa semnalizeze toate constructiile nonconforme sintaxei
     3. Erorile cele mai frecvente sa fie diagnosticate corect fara a propaga 
noi erori in cadrul derivarii.

     2.6 Procesorul abstract PL0 
     Pentru a oferi o libertate cit mai mare interpretorului construim o masina 
abstracta independenta de hardware-ul folosit.Aceasta masina consta din doua din 
doua segmente:
     a) segmentul de cod care este incarcat la inceputul interpretarii si care 
ramine neschimbat de-a lungul intregului proces
     b) segmentul de date, organizat sub forma de stiva.Aceasta organizare 
permite o mare flexibilitate in interpretarea operatiilor aritmetice care 
inlocuiesc intotdeauna primele doua elemente din virful stivei cu rezultatul 
aplicarii unui operator aritmetic avindu-le ca argumente. 
     Elementul din virful stivei este accesat prin registrul T (top stack 
register). Registrul de instructiuni  I  contine intotdeauna adresa 
instructiunii curente.Registrul de program P contine intotdeauna adresa 
urmatoarei instructiuni ce se va executa.
     Orice procedura din PL0 poate contine variabile locale. Apelul recursiv al 
procedurilor este rezolvat de aceea prin stocarea mediului caracteristic 
apelurilor succesive pe segmentul de date, si prin eliberarea acestuia la 
revenirea din apel.Fiecare procedura trebuie sa contina citeva informatii legate 
de adresa de program de unde este apelata (return-address) precum si adresa 
segmentului de data al apelantului -legatura dinamica-(dynamic link). Adresa 
celei mai recente alocari in segmentul de date (originea legaturi dinamice) este 
retinuta in registrul B.Alocarea spatiului facindu-se in timpul executiei este 
evident ca aceste adrese sint adrese relative si nu absolute.Daca o variabila 
este locala unei proceduri, adresa ei de baza este furnizata de registrul B. 
Daca nu , este necesar pentru a o obtine sa coborim pe lantul de segmente de 
date.Compilatorul cunoaste evident lantul static de acces la variabile ( 
corespunzator declararii ) in timp ce lantul dinamic caracterizeaza istoria 
apelurilor.Din pacate aceste doua cai de acces nu sint neaparat egale.
     De exemplu daca procedura A apeleaza procedura B declarata locala lui A, B 
apeleaza pe C declarata locala lui B iar C apeleaza din nou pe B, putem spune ca 
A este declarata la nivelul 1, B la 2 iar C la 3.Daca variabila a, declarata in 
A se doreste a fi accesata din B, compilatorul stiind ca exista un nivel 
diferenta intre ele si coborind pe lantul dinamic cu un singur pas va accesa o 
variabila locala lui C. De aceea este absolut necesara introducerea unei 
legaturi suplimentare , corespunzatoare declararii: legatura statica (static 
link). Din acest motiv adresele sint generate ca perechi de numere indicind 
diferenta statica intre nivele si deplasamentul relativ in cadrul unui segment 
de date:
     
           DL       RA        SL
           ----------------------
      --->|      |       |       |<---  <---------
     |     ----------------------     |           |
     |    |  var. locale lui A   |    |           |
     |    |                      |    |           |
     |     ----------------------     |           |
  ->  ----|---   |       |   ----|----- <-        |
 |         ----------------------         |       |
 |        | var. locale lui B    |        |       |
 |        |                      |        |       |
 |         ----------------------         |       |
 >--------|---   |       |   ----|---------       |
|          ----------------------                 |
|         | var. locale lui C    |                |
|         |                      |                |
|          ----------------------                 |
----------|---  |       |   -----|----------------   <-----B
           ----------------------
          | var. locale lui B    |
          |                      |
           ----------------------                    <------T

     Setul instructiunilor recunoscute de procesorul PL0 este :
     1. LIT - instructiune pentru incarcare constante pe stiva
     2. LOD - instructiune pentru incarcare variabile pe stiva
     3. STO - instructiune pentru memorare 
     4. CAL - instructiune activare subrutina
     5.INT - instructiune pentru alocare spatiu pe stiva prin incrementarea 
registrului T
     6. JMP,JPC - instructiuni de salt neconditionat , respectiv conditionat 
     7. OPR - un set de operatori relationali sau aritmetici

     Formatul general al instructiunii cuprinde trei cimpuri
     ___________________
    |  f  |  l  |   a   | 
     -------------------

unde f este codul instructiunii iar a reprezinta de la caz la caz: pentru OPR 
specifica identitatea operatorului, pentru LIT si INT este un numar, pentru 
JMP,JPC,CAL este o adresa de program, pentru LOD si STO este o adresa de data.

     2.7 Generarea codului
     Generarea codului intermediar se face simplu , aducind expresiile 
aritmetice la forma postfixata ( adecvata modului de organizare a procesorului 
abstract - stiva ).Singurele probleme apar la generarea codului pentru 
instructiunile conditionale sau de ciclare.In acest caz problemele se rezolva 
plasind instructiunile ce nu pot fi completate imediat intr-un sir si 
completarea lor de indata ce adresele necunoscute devin disponibile. ("fixup"). 
Aceasta se face prin retinerea adreselor relative din program.Codul generat 
pentru astfel de instructiuni este de forma:
     if C then S              while C do S
     ------------             ------------
     cod pentru C             L1: cod pentru C
     JPC L1                       JPC L2
     cod pentru S                 cod pentru S
L1:  ...                          JMP L1
                              L2: ... 

     2.8 Exemple
Pentru programul de calcul al celui mai mare divizor comun a doi intregi:
const m = 7 , n = 85;
var x,y,z,q,r;

procedure gcd;
var f,g;
begin
	f:=x;g:=y;
	while f /= g do
		begin
		if f < g then g := g - f;
		if g < f then f := f - g;
		end;
	z := f;
end;

begin
x:=84; y := 36; call gcd;
end.

in care am introdus pentru verificare si declaratii de constante, se obtine 
urmatorul cod intermediar:

0  JMP  0  31				19  LOD  0  4		
1  JMP  0  2				20  LOD  0  3
2  INT  0  5				21  OPR  0  10
3  LOD  1  3				22  JPC  0  27
4  STO  0  3				23  LOD  0  3
5  LOD  1  4				24  LOD  0  4
6  STO  0  4				25  OPR  0  3
7  LOD  0  3				26  STO  0  3
8  LOD  0  4				27  JMP  0  7
9  OPR  0  9				28  LOD  0  3
10  JPC  0  28				29  STO  1  5
11  LOD  0  3				30  OPR  0  0
12  LOD  0  4				31  INT  0  8
13  OPR  0  10				32  LIT  0  84
14  JPC  0  19				33  STO  0  3
15  LOD  0  4				34  LIT  0  36
16  LOD  0  3				35  STO  0  4
17  OPR  0  3				36  CAL  0  1
18  STO  0  4				37  OPR  0  0

In timpul interpretarii stiva evolueaza de la:
0 0 0 84 36 0 0 0 
la:
12 0 0 0 84 36 12 0 0 0 
Se remarca obtinerea rezultatului corect , 12.


     3. Desfasurarea lucrarii

     3.1 Sa se studieze analizorul sintactic si sistemul de revenire din erori.
     3.2 Sa se modifice analizorul sintactic astfel incit limbajul PL0 sa 
accepte si operatii de intrare iesire simple, de forma :
     read(variabila); write(variabila);
     3.3 Sa se scrie in PL0 programul pentru calculul factorialului.
     3.3 Sa se studieze procesorul abstract PL0 si modul de generare si 
executare a codului intermediar.
     3.4 Sa se introduca pentru generarea/executarea codului si facilitatile de 
la punctul 3.2
     3.5 Sa se scrie o varianta de analizor sintactic pentru PL0 cu ajutorul 
utilitarelor YACC si LEX.


     4. Intrebari si dezvoltari

     4.1 Sa se extinda procesorul PL0 astfel incit sa poata opera si cu 
instructiuni ca :
     if <conditie> then <instructiune> else <instructiune>
     repeat <instructiune> until <conditie>
     4.2 Sa se extinda procesorul PL0 astfel incit sa poata manipula 
transmiterea parametrilor prin valoare si prin referinta
     4.3 Sa se extinda procesorul PL0 astfel incit sa poata manipula operatii cu 
siruri
     4.4 Se se modifice procesorul PL0 astfel incit codul intermediar sa fie 
reprezentat in limbaj de asamblare - familia 8086.

   
  
   	5. Programe

FISIERUL: pl0dr.cpp
#include <conio.h>
#include <bios.h>
#include <string.h>
#include <stdio.h>
#include <process.h>

#define		Case	break ; case

#define		nrcr	11		// numar cuvint cheie
#define		ltid	100		// lungime cuvint identificatori
#define		maxcn	7		// max.nr.cifre in numar
#define		lid	10		// lungime identificator
#define		amax	2047		// adresa maxima
#define		nivmax 3		// nivel maxim de incuibare
#define		llin	100		// lungime linie sursa
#define		lcod	200		// lungime tablou cod

		/*tip simbol*/
#define		SIMBOL		long
#define		NUL		1L
#define		IDENT		2L
#define		NUMAR		4L
#define		PLUS		8L
#define		MINUS		16L
#define		STEA		32L
#define		SLASH		64L
#define		ODD		128L
#define		EQL		256L
#define		NEQ		512L
#define		LSS		1024L
#define		LEQ		2048L
#define		GTR		4096L
#define		GEQ		8192L
#define		PARST		16384L
#define		PARDR		32768L
#define		VIRG		65536L
#define		PVIRG		131072L
#define		PUNCT		262144L
#define		DEVINE	524288L
#define		BEGIN		1048576L
#define		END	      2097152L
#define		IF		4194304L
#define		THEN		8388608L
#define		WHILE		16777216L
#define		DO		33554432L
#define		CALL		67108864L
#define		CONST		134217728L
#define		VAR		268435456L
#define		PROC		536870912L

		/*tip obiect*/

#define		CNST		 0
#define		VRB		 1
#define		PRC		 2
#define		SETSIMB	long

		/*operatii procesor*/

#define		LIT		0
#define		OPR		1
#define		LOD		2
#define		STO		3
#define		CAL		4
#define		INT		5
#define		JMP		6
#define		JPC		7
#define		SIDECL		(CONST | VAR | PROC)
#define		SINSTR		(BEGIN | CALL | IF | WHILE)
#define		SIFACT		(IDENT | NUMAR | PARST)

#define		DSTV	500	        // dimensiune stiva

typedef struct{
	int o;  			// cod operatie
	int n;  			// nivel
	int a;  			// adresa
	} instr;

SIMBOL simbol;
char   id[lid];
int    numar;
int    semer;
int    nivel=0;
int    nrlin;


typedef struct {
		char nume[lid+1];
		int fel;
		union{
		      int val;			// fel=const
		      struct{
			     int nivel,adr;	// fel=vrb | prc
			     }s;
		      }u;
		    }simb;
simb  tabel[ltid+1];			// tabel identificatori
int   xt=1;				// index pozitie ultima in tabel

char	*cuvcheie[]=
		{"begin","call","const","do","end","if",
		  "odd","procedure","then","var","while"};

SIMBOL	simbcheie[]=
		{ BEGIN,CALL,CONST,DO,END,IF,
		  ODD,PROC,THEN,VAR,WHILE};
SIMBOL  simbcar[]=
		{ PARST,PARDR,STEA,PLUS,VIRG,MINUS,PUNCT,SLASH,
		  NUL,NUL,NUL,NUL,NUL,NUL,NUL,NUL,
		  NUL,NUL,NUL,PVIRG,LSS,EQL,GTR,NUL };

char	linie[llin];			// linie sursa
int	cc=0;				// index caracter curent in linie
int	ll=0;				// index sfirsit linie
char	car=' ';			// ultimul caracter

instr	cod[lcod+1];			// memorie cod procesor pl0
int	xc=0;				// index alocare cod
int	xd;				// index alocare date
int	p,b,t;				// registri program,baza,virf stiva
int	s[DSTV];			// stiva procesor pl0
instr	*i;				// registru instructiuni procesor pl0
char	*mnem[]=
		{ "LIT","OPR","LOD","STO","CAL","INT","JMP","JPC"};

char	*cmd;

// declaratii functii
void eroare(char *);
SIMBOL exsimb(void);
void bloc(SETSIMB);
void instructiune(SETSIMB);
void conditie(SETSIMB);
void expresie(SETSIMB);
void termen(SETSIMB);
void factor(SETSIMB);
void decl_const(void);
void decl_var(void);
void introdu(int);
int pozitie(char *);
int baza(int);
void interpret(void);
void gen(int,int,int);
void test(SETSIMB,SETSIMB,char *);
void prcod(int);
void executa(void);
void prtab(void);

void main(int argc, char *argv[])
{
  if( freopen(argv[1],"r",stdin) == NULL){
	printf("nu se poate deschide %s\n",argv[1]);
	exit(0);
	}
  cmd=argv[1];
  exsimb();
  bloc( PUNCT | SIDECL | SINSTR );
  if(simbol != PUNCT)
	eroare("lipsa punct terminal");
  printf("\nTabela de simboluri este : \n");
  prtab();
  bioskey(0);
  printf("\n Codul intermediar generat este : \n");
  prcod(0);
  bioskey(0);
  if(semer)
	printf("erori,abandon\n");
  else
	interpret();
}

void eroare(char *s)
{
 printf("%s,%d : %s\n",cmd,nrlin,s);
 semer++;
}

void prtab(void)
{
 int i;
 for( i=1 ; i <= xt + 1 ; i++ ){
	printf("%s %d ",tabel[i].nume,tabel[i].fel);
	switch(tabel[i].fel){
		case CNST : printf("%d \n",tabel[i].u.val);
		Case VRB  :
		case PRC  : printf("%d %d \n",tabel[i].u.s.nivel,tabel[i].u.s.adr);
		}
	}
}

int excar(void)
{ if(cc == ll){
	if(gets(linie) == NULL){
		printf("program incomplet\n");
		exit(0);
		}
	cc=0; ll=strlen(linie); linie[ll++]='\n';
	nrlin++;
	}
  return ( car = linie[cc++] );
}

SIMBOL exsimb(void)
{int i,j,k,kk;
 while( car == ' ' || car == '\t' || car =='\n')  excar();
 if(car >= 'a' && car <= 'z' || car >= 'a' && car <= 'z'){
	// extragere identificator
	k=0;
	do{
	   if( k < lid )
		id[k++]=car;
	   excar();
	   }while( car >= 'a' && car <= 'z' || car >= 'a' && car <= 'z'  || car >= 
'0' && car <= '9');
	id[k]='\0';
	i=0; j=nrcr-1;
	do{
	   k=(i+j)/2;
	   //* printf("se compara %s cu %s\n",id,cuvcheie[k]);
	   if( (kk=strcmp(id,cuvcheie[k])) <= 0 )
		j=k-1;
	   if(kk >= 0) i=k+1;
	   } while(i <= j);
	 //* printf("s-a recunoscut simbolul %s\n",id);
	 return(simbol= (i-1 > j) ? simbcheie[k] : IDENT);
  }
  else if(car >= '0' && car <= '9'){
	// extragere numar
	k=numar=0;
	do{
	   numar=10*numar+car-'0';
	   ++k;
	   excar();
	} while(car >= '0' && car <= '9');
	if(k > maxcn) eroare("numar prea mare\n");
	//* printf("s-a citit numarul %d\n",numar);
	return( simbol = NUMAR);
   }
   else if(car == ':'){
	 if( excar() == '=' ){
		// extragere operator asignare
		excar();
		//* printf("s-a recunoscut simbolul devine\n");
		return(simbol=DEVINE);
		}
	 else
		// nimic nu este corect
		return(simbol=NUL);
	 }
   else if(car == '<' || car == '>' || car == '/'){
	// extrage operator relational
	i=car;
	if(excar()=='='){
		//* printf("s-a recunoscut un operator relational\n");
		excar();
		switch(i){
		     case '<' : return(simbol=LEQ);
		     case '>' : return(simbol=GEQ);
		     case '/' : return(simbol=NEQ);
	}     }
	else return ( simbol = simbcar[i-'('] );
    }
    else {
	simbol=simbcar[car-'('];
	excar();//* printf("s-a recunoscut simbolul %ld\n",simbol);
	return(simbol);
	}
    return -1;
}

void bloc(SETSIMB urma)
{
 int auxt,auxd;
 int xt0=xt-1;	// index initial in tabel
 int xc0=xc;	// index initial in cod
 xd=3;
 tabel[xt].u.s.adr=xc;
 gen(JMP,0,0);
 if( nivel > nivmax )
	eroare("depasire nivel max.incuibarire bloc");
 do{
    if ( simbol == CONST ){
	// actiuni aferente recunoasterii declaratiilor de constanta
	exsimb();
	do{
	   decl_const();
	   while( simbol == VIRG){
		exsimb();
		decl_const();
		}
	   if(simbol == PVIRG)
		exsimb();
	   else
		eroare("lipsa , sau ;");
	   } while( simbol == IDENT);
       }
    if( simbol == VAR){
	// actiuni aferente recunoasterii declaratiilor de variabila
	exsimb();
	do{
	   decl_var();
	   while( simbol == VIRG){
		exsimb();
		decl_var();
		}
	   if(simbol == PVIRG)
		exsimb();
	   else
		eroare("lipsa , sau ;");
	   } while( simbol == IDENT );
    }
    auxd=xd;
    while( simbol == PROC){
	// actiuni aferente recunoasterii declaratiilor de proceduri
	if(exsimb()==IDENT){
		introdu(PRC);
		exsimb();
		}
	else
		eroare("lipsa identificator dupa const,var,procedure");

	if(simbol == PVIRG)
		exsimb();
	else
		eroare("lipsa , sau ;");
	++nivel;
	auxt=xt;
	bloc( urma | PVIRG );
	--nivel;
	xt=auxt;

	if(simbol == PVIRG){
		exsimb();
		test(SINSTR|IDENT|PROC, urma , "simbol incorect dupa declarare 
procedura");
		}
	else
		eroare("lipsa , sau ;");
	}
	test(SINSTR|IDENT,SIDECL,"se asteapta instructiune");
    } while( simbol & SIDECL );
    //* printf("s-a terminat cu declararile\n");
    cod[tabel[xt0].u.s.adr].a=xc;
    tabel[xt].u.s.adr=xc;	/*adresa start cod*/
    gen(INT,0,auxd);
    //* printf("se asteapta instructiune\n");
    instructiune( urma|PVIRG|END );
    gen(OPR,0,0);	/*return*/
    test( urma, 0 ,"simbol incorect dupa instructiune din bloc");
}

void instructiune(SETSIMB urma)
{
 int i,xc1,xc2;
 //* printf("instructiune\n");
 if(simbol == IDENT){
	// atribuire
	if( ! (i = pozitie(id)) )
		eroare("identificator nedeclarat");
	else if( tabel[i].fel != VRB ){
		eroare("atribuire ilegalala const sau proc");
		i=0;
		}
	if( exsimb() == DEVINE)
		exsimb();
	else  eroare("se asteapta :=");
	expresie(urma);
	if(i != 0)
		gen(STO,nivel-tabel[i].u.s.nivel,tabel[i].u.s.adr);
	}
 else if(simbol == CALL){
	// apel de procedura
	if( exsimb() != IDENT)
		eroare("lipsa ident dupa call");
	else { if( ! ( i = pozitie(id)) )
			eroare("identificator nedeclarat");
	       else if( tabel[i].fel == PRC)
			gen(CAL,nivel-tabel[i].u.s.nivel,tabel[i].u.s.adr);
	       else
			eroare("identificator nedeclarat");
	       exsimb();
	       }
	}
 else if(simbol == IF){
	// ramificare
	exsimb();
	conditie(THEN|DO|urma);
	if(simbol == THEN)
		 exsimb();
	else
		eroare("se asteapta then");
	xc1=xc;
	gen(JPC,0,0);
	instructiune(urma);
	cod[xc1].a=xc;
	}
 else if(simbol == BEGIN){
	// bloc
	exsimb();
	instructiune(PVIRG|END|urma);
	while(simbol & (PVIRG|SINSTR)){
		if(simbol == PVIRG)
			exsimb();
		else
			eroare("lipsa ; intre instructiuni");
		instructiune(PVIRG|END|urma);
		}
	if(simbol == END)
		exsimb();
	else
		eroare("se asteapta ; sau end\n");
	}
 else if(simbol == WHILE){
	// bucla
	xc1=xc;
	exsimb();
	conditie(DO|urma);
	xc2=xc;
	gen(JPC,0,0);
	if(simbol == DO)
		exsimb();
	else
		eroare("se asteapta do\n");
	instructiune(urma);
	gen(JMP,0,xc1);
	cod[xc2].a=xc;
	}
 test(urma,0,"simbol incorect dupa instructiune");
}

void conditie(SETSIMB urma)
{
 SIMBOL oprel;
 if(simbol == ODD){
	exsimb();
	expresie(urma);
	gen(OPR,0,6);
 }
 else{
	expresie(EQL | NEQ | LSS | GTR | LEQ | GEQ | urma);
	if( ! ( simbol & (EQL | NEQ | LSS | GTR | LEQ | GEQ )) )
		eroare("se asteapta operator relational\n");
	else{	oprel=simbol;
		exsimb();
		expresie(urma);
		if(oprel == EQL)
			gen(OPR,0,8);
		else if(oprel == NEQ)
			gen(OPR,0,9);
		else if(oprel == LSS)
			gen(OPR,0,10);
		else if(oprel == GEQ)
			gen(OPR,0,11);
		else if(oprel == GTR)
			gen(OPR,0,12);
		else if(oprel == LEQ)
			gen(OPR,0,13);
		}
	}
}

void expresie(SETSIMB urma)
{SIMBOL opad;
 if(simbol & (PLUS|MINUS)){
	opad=simbol;
	exsimb();
	termen(urma|PLUS|MINUS);
	if(opad == MINUS)
		gen(OPR,0,1);
	}
 else termen(urma|PLUS|MINUS);
 while(simbol & (PLUS|MINUS)){
	opad=simbol;
	exsimb();
	termen(urma|PLUS|MINUS);
	gen(OPR,0,opad == PLUS ? 2 : 3);
	}
}

void termen(SETSIMB urma)
{SIMBOL opmul;
 factor(urma|STEA|SLASH);
 while(simbol & (STEA|SLASH) ){
	opmul=simbol;
	exsimb();
	factor(urma|STEA|SLASH);
	gen(OPR,0,opmul == STEA ? 4 : 5 );
	}
}

void factor(SETSIMB urma)
{int i;
 test(SIFACT,urma,"o expresie nu poate incepe cu ac. simbol");
 while(simbol & SIFACT){
	if(simbol == IDENT){
		if( ! (i=pozitie(id)) )
			eroare("identificator nedeclarat\n");
		else
		    switch(tabel[i].fel){
			case CNST : gen(LIT,0,tabel[i].u.val);
			Case VRB  : 
gen(LOD,nivel-tabel[i].u.s.nivel,tabel[i].u.s.adr);
			Case PRC  : eroare("expresia nu poate contine un identificaror 
de procedura");
			}
		exsimb();
		}
	else if(simbol == NUMAR){
		if(numar > amax){
			eroare("numar prea mare\n");
			numar=0;
			}
		gen(LIT,0,numar); exsimb();
		}
	else if(simbol == PARST){
		exsimb();
		expresie(PARDR|urma);
		if(simbol == PARDR)
			exsimb();
		else
			eroare("lipsa ( \n");
		}
	test(urma, PARST, "factorul precedent nu poate fi urmat de ac. simbol");
	}
}

void decl_const(void)
{
  if(simbol == IDENT){
	exsimb();
	if(simbol == DEVINE || simbol == EQL ){
		if(simbol == DEVINE)
			eroare("se utilizeaza = nu :=");
		exsimb();
		if(simbol == NUMAR){
			introdu(CNST);
			exsimb();
			}
		else
			eroare("= trebuie urmat de un numar");
		}
	else
		eroare("identificatorul trebuie urmat de =");
	}
  else
	eroare("const,var,procedure trebuie sa fie urmate de un identificator");
}

void decl_var(void)
{
 if(simbol == IDENT){
	//* printf("s-a recunoscut o declarare de var. \n");
	introdu(VRB);
	exsimb();
	}
 else
	eroare("const,var,procedure trebuie sa fie urmate de un identificator");
}


void introdu(int k)
{
  strcpy(tabel[xt].nume,id);
  tabel[xt].fel=k;
  switch(k){
	case CNST : if(numar > amax){
			eroare("numar prea mare");
			numar=0;
			}
			tabel[xt].u.val=numar;
			//* printf("s-a introdus cnst=%d\n",id);

	Case VRB  : tabel[xt].u.s.nivel=nivel;
		    tabel[xt].u.s.adr= xd++;
		    //* printf("s-a introdus vrb %s\n",id);

	Case PRC  : tabel[xt].u.s.nivel=nivel;
		    tabel[xt].u.s.adr = xc;
		    //* printf("s-a introdus prc %s\n",id);
	}
  xt++;
}

int pozitie(char *id)
{
 int i=xt;
 strcpy(tabel[0].nume,id);
 while(strcmp(tabel[i].nume,id))
	--i;
 return(i);
}

int baza(int nivelul)
{
 int bb=b;
 while(nivelul > 0){
	bb=s[bb];
	--nivelul;
	}
 return bb;
}

void interpret(void)
{
  printf(" \nprocesor pl0:\n");
  b=p=0; t= -1;
  s[0]=s[1]=s[2]=0;
  do{
	int k;
	for( k=0 ; k<=t; k++)
		printf("%d ", s[k]);
	putchar('\n');
 //*	printf("top = %d,bloc = %d, adr = %d \n execut:",t,b,p);
	i = &cod[p++];
	switch(i->o){
		case LIT : s[++t]=i->a;
		Case OPR : switch(i->a){
			case 0 : t=b-1;p=s[t+2]; b=s[t+1];
				 if(t > 0)
					printf("%d ",s[t-3]);
			Case 1 : s[t] = -s[t];
			Case 2 : --t; s[t] += s[t+1];
			Case 3 : --t; s[t] -= s[t+1];
			Case 4 : --t; s[t] *= s[t+1];
			Case 5 : --t; s[t] /= s[t+1];
			Case 6 : s[t] &= 01;
			Case 8 : --t; s[t]= s[t]==s[t+1];
			Case 9 : --t; s[t]= s[t]!=s[t+1];
			Case 10 : --t; s[t]= s[t]<s[t+1];
			Case 11 : --t; s[t]= s[t]>=s[t+1];
			Case 12 : --t; s[t]= s[t]>s[t+1];
			Case 13 : --t; s[t]= s[t]<=s[t+1];
			}
		Case LOD : ++t; s[t]=s[baza(i->n)+i->a];
		Case STO : s[baza(i->n)+i->a]=s[t];
			   //*   printf("%d\n",s[t]);
			   t--;
		Case CAL :   // generare marcaj de bloc nou
			   s[t+1]=baza(i->n);
			   s[t+2]=b; s[t+3]=p;
			   b=t+2; p=i->a;
			   t++;
		Case INT : t+=i->a;
		Case JMP : p=i->a;
		Case JPC : if(s[t--] == 0 )
				p=i->a;
		}
	} while(p != 0);
  printf("\n  bye,pl0\n");
}


void gen(int x,int y,int z)
{
 if(xc >= lcod){
		printf(" program prea mare\n");
		exit(0);
		}
 cod[xc].o=x;
 cod[xc].n=y;
 cod[xc++].a=z;
}

void test(SETSIMB s,SETSIMB r,char *p)
{ // consuma din intrare pina gaseste o instructiune
  if( ! (simbol & s) ){
	eroare(p);
	s|=r;
	while( ! ( simbol & s ) )
		exsimb();
	}
}

void prcod(int xc0)
{
 int i;
 for(i=xc0;i<xc;i++)
	printf("%d  %s  %d  %d\n",i,mnem[cod[i].o],cod[i].n,cod[i].a);
}

	





 

 
 



